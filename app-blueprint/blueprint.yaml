tosca_definitions_version: cloudify_dsl_1_4

description: Deploys a simple web application that exposes metrics to Prometheus.

imports:
  - https://cloudify.co/spec/cloudify/6.4.0/types.yaml
  - plugin:cloudify-kubernetes-plugin
  - plugin:cloudify-utilities-plugin

inputs:

  kubernetes_api_endpoint:
    type: string
    display_label: Kubernetes API Endpoint
    default: { get_environment_capability: kubernetes_cluster_host }

  kubernetes_token:
    type: string
    display_label: Kubernetes Service Account Token
    default: { get_environment_capability: token }

  kubernetes_ca_cert:
    type: string
    display_label: Kubernetes CA Certificate
    default: { get_environment_capability: ssl_ca_cert }

  kubernetes_client_config:
    display_label: Kubernetes plugin client configuration
    hidden: true
    description: >
     Configuration for Kubernetes client. Can be left at default values.
    default:
      configuration:
        api_options:
          host: { get_input: kubernetes_api_endpoint }
          api_key: { get_input: kubernetes_token }
          ssl_ca_cert: { get_input: kubernetes_ca_cert }
          debug: true
          verify_ssl: true

node_templates:

  python_app:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      client_config: { get_input: kubernetes_client_config }
      file:
        resource_path: manifests/deployment.yaml
    interfaces:
      chaos_actions:        
        run_http_chaos:
          implementation: scripts/kubectl_apply.sh
          executor: central_deployment_agent
          inputs:
            host: { get_input: kubernetes_api_endpoint }
            token: { get_input: kubernetes_token }
            manifest: manifests/chaos.yaml

  service:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      client_config: { get_input: kubernetes_client_config }
      file:
        resource_path: manifests/service.yaml
    relationships:
      - target: python_app
        type: cloudify.relationships.depends_on

  service_monitor:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/kubectl_apply.sh
          executor: central_deployment_agent
          inputs: &kubectl_inputs
            host: { get_input: kubernetes_api_endpoint }
            token: { get_input: kubernetes_token }
            manifest: manifests/servicemonitor.yaml
        delete:
          implementation: scripts/kubectl_delete.sh
          executor: central_deployment_agent
          inputs: *kubectl_inputs
    relationships:
      - target: service
        type: cloudify.relationships.depends_on

workflows:
  RunHTTPChaos:
    mapping: cloudify_custom_workflow.cloudify_custom_workflow.tasks.customwf
    parameters:
      nodes_to_runon:
        default:
          - python_app
      operations_to_execute:
        default:
          - chaos_actions.run_http_chaos

capabilities:
  app_endpoint:
    description: Endpoint for accessing the web application
    value: { get_attribute: [ service, "kubernetes", "manifests/service.yaml#0", "status", "load_balancer", "ingress", 0, "hostname"]}
